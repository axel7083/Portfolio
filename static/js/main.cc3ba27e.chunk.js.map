{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","mounted","loaded","loading_title","progress","loading_description","setProgress","bind","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","on","progression","console","log","setState","Math","round","this","value","document","querySelector","style","width","opacity","height","textAlign","className","margin","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uQAOqBA,E,kDAEnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,SAAQ,EACRC,QAAO,EACPC,cAAc,UACdC,SAAS,KACTC,oBAAoB,2DAGtB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAEnB,EAAKC,aAAe,IAAIC,eAAa,CACnCC,UAAW,wBACXC,QAAS,mBACTC,aAAc,2BACdC,QAAS,qBAOX,EAAKL,aAAaM,GAAG,YAAY,SAAAC,GAG/BC,QAAQC,IAAI,cAAgBF,GAC5B,EAAKT,YAAYS,GACjB,EAAKG,SAAS,CAACd,SAASe,KAAKC,MAAkB,IAAZL,GAAmB,SAGxD,EAAKP,aAAaM,GAAG,UAAU,WAC7BE,QAAQC,IAAI,uBACZ,EAAKC,SAAS,CAAChB,QAAO,OAlCP,E,gEAwCjBmB,KAAKH,SAAS,CAACjB,SAAQ,IACvBoB,KAAKf,YAAY,K,kCAGPgB,GAEV,GAAID,KAAKrB,MAAMC,UAAWoB,KAAKrB,MAAME,OAArC,CAEA,IAAME,EAAWmB,SAASC,cAAc,kBACxCpB,EAASqB,MAAMC,MAAe,IAANJ,EAAa,IACrClB,EAASqB,MAAME,QAAU,K,+BAIzB,OAAO,sBAAKF,MAAO,CAACC,MAAM,OAAOE,OAAO,OAAOC,UAAU,UAAlD,UACHR,KAAKrB,MAAME,OASN,6BATa,gCAClB,6BAAKmB,KAAKrB,MAAMG,gBACfkB,KAAKrB,MAAMK,oBAAoB,uBAAM,uBAEtC,qBAAKyB,UAAW,WAAYL,MAAO,CAACM,OAAO,QAA3C,SACE,qBAAKD,UAAW,gBAAhB,SACGT,KAAKrB,MAAMI,gBAIlB,cAAC,IAAD,CAAO0B,UAAW,kBAAmBJ,MAAM,OAAOE,OAAO,OAAOpB,aAAca,KAAKb,sB,GAnExDwB,IAAMC,WCKxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BZ,M","file":"static/js/main.cc3ba27e.chunk.js","sourcesContent":["import './App.css';\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport React from \"react\";\n\n// Thanks to https://codepen.io/rstamper/pen/mdyqyeM for his Loading bar. (I was to lazy to do one.)\n\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mounted:false,\n      loaded:false,\n      loading_title:\"Loading\",\n      progress:\"0%\",\n      loading_description:\"This can take some time depending on your connection...\"\n    }\n\n    this.setProgress = this.setProgress.bind(this);\n\n    this.unityContext = new UnityContext({\n      loaderUrl: \"unity/build.loader.js\",\n      dataUrl: \"unity/build.data\",\n      frameworkUrl: \"unity/build.framework.js\",\n      codeUrl: \"unity/build.wasm\",\n    });\n\n    // Create a new listener for our progression Event.\n    // While the Unity player is loading, it will\n    // constantly keep telling us the progression.\n\n    this.unityContext.on(\"progress\", progression => {\n      // Now we can use the progression to for example\n      // display it on our React app.\n      console.log(\"[PROGRESS] \" + progression);\n      this.setProgress(progression);\n      this.setState({progress:Math.round(progression*100) + \"%\"})\n    });\n\n    this.unityContext.on('loaded', () => {\n      console.log(\"[PROGRESS] COMPLETE\");\n      this.setState({loaded:true})\n    });\n  }\n\n\n  componentDidMount() {\n    this.setState({mounted:true});\n    this.setProgress(0);\n  }\n\n  setProgress(value)\n  {\n    if(!this.state.mounted || this.state.loaded)\n      return;\n    const progress = document.querySelector('.progress-done');\n    progress.style.width = (value*100) + '%';\n    progress.style.opacity = 1;\n  }\n\n  render() {\n    return <div style={{width:\"100%\",height:\"100%\",textAlign:\"center\"}}>\n      {!this.state.loaded?<div>\n        <h1>{this.state.loading_title}</h1>\n        {this.state.loading_description}<br /><br />\n\n        <div className={\"progress\"} style={{margin:\"auto\"}}>\n          <div className={\"progress-done\"}>\n            {this.state.progress}\n          </div>\n        </div>\n      </div>:<></>}\n      <Unity className={\"unity-container\"} width=\"100%\" height=\"100%\" unityContext={this.unityContext} />\n    </div>;\n  }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}